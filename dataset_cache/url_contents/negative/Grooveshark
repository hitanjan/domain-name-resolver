




sosedoff/grooveshark · GitHub





































Skip to content







Sign up
Sign in




This repository






Explore


Features


Enterprise


Blog














    Watch
  

    9
  




    Star
  

      129
    




        Fork
      

        30
      




grooveshark











 

 


 


 


 


 





 

 


 

 




 clone URL






 checkout URL





You can clone with
  HTTPS or Subversion.
  





                  Download ZIP
                






      Grooveshark.com unofficial API library
    

http://github.com/sosedoff/grooveshark










            commits
        





          branch
        





          releases
        






            Fetching contributors
          
 









































Branches


Tags











Nothing to show





v0.2.14



v0.2.13



v0.2.12



v0.2.11



v0.2.10



v0.2.9



v0.2.8.2



v0.2.8.1



v0.2.8



v0.2.7



v0.2.6



v0.2.5



v0.2.4



v0.2.3



0.2.1



0.2.0



0.1.1



0.1.0


Nothing to show












Termination note



latest commit 



        authored May 1, 2015




Permalink




Failed to load latest commit information.












































































































































































      README.md
    
Grooveshark
GROOVESHARK.COM HAS BEEN TERMINATED ON APRIL 30, 2015
Unofficial grooveshark API ruby library gives your ability to search and stream songs,
manage playlists, media library and favorites.
API was discovered using http proxy and does not pretend to be always valid due to website API changes.


Installation
Install gem from rubygems:
gem install grooveshark

Or add this line to your Gemfile:
gem "grooveshark"

And install bundle:
bundle install

Usage
First, you'll need to create a session. Grooveshark's session is a
regular PHP session with expiration date of 7 days.
 

client  ::.
Now we can find some songs:
songs  client.search_songs()

songs.each ||
  s.id          
  s.name        
  s.artist      
  s.album       
  s.duration    

We got collection of songs. Check Song object for additional attributes.
In order to stream song we need to get the authorization
song  songs.first
url  client.get_song_url(song)
Given url is valid only for current session and cannot be shared or stored permanently.
Also, it probably violates terms of service.
User Authentication
To get your user account you need to provide username and password.
If username or password is not valid InvalidAuthentication exception will be raised.
client  ::.


  user  client.login(, )
 
  puts 

Playlists and favorites
Get all user playlists:
user.playlists.each ||
  p.id          
  p.name        
  p.about       

Get user playlist:
playlist  user.get_playlist()
Get all playlist songs:
playlist  user.get_playlist()
playlist.load_songs
songs  playlist.songs
Rename existing playlist:
playlist  user.get_playlist()
playlist.rename(, )
Delete existing user playlist
playlist  user.get_playlist()
playlist.delete
Create a new playlist. First parameter is mandatory, description and songs are optional.
For songs you can provide array of Song objects or array of IDs.
songs  client.search_songs()
p  user.create_playlist(, , songs)
Get user favorite songs:
songs  user.favorites
Add song to favorites:
user.add_favorite(song) 
Remove song from favorites:
user.remove_favorite(song) 
Broadcasts
Get top broadcasts:
client.top_broadcasts.each ||
  b.id                
  b.name              

To reload the current status of the broadcast (e.g. currently playing song,
next song, etc.), call reload_status method:
broadcast.reload_status
Get the current and next song for a broadcast:
current_song  broadcast.active_song
next_song  broadcast.next_song
Check whether the broadcast is currently playing:
 broadcast.is_playing
  

User library
Get all songs from library as a collection of Song objects
songs  user.library
Add songs to library:
songs  client.search_songs()
user.library_add(songs)
Remove selected songs from library.
Unfortunately mass-deletion is not supported by Grooveshark API.
You will have to delete each song via separate method call.
song  user.library.first 
user.library_remove(song)
Explore community
Get all recently active users:
client.recent_users
Find user by ID:
client.get_user_by_id()
Find user by username:
client.get_user_by_username()
Fetch recent user activity:
user  client.get_user_by_username()
user.feed
Testing
Run test suite:
bundle exec rake

Contact

Dan Sosedoff
dan.sosedoff@gmail.com
http://twitter.com/sosedoff

License
MIT License
Copyright (c) 2011-2015 Dan Sosedoff dan.sosedoff@gmail.com
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.











Status
API
Training
Shop
Blog
About
Help





© 2015 , Inc.
Terms
Privacy
Security
Contact
























      Something went wrong with that request. Please try again.
    




